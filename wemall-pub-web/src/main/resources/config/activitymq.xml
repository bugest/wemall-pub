<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">

	<!-- ActiveMQ 连接工厂 -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<!-- 如果连接网络：tcp://ip:61616；未连接网络：tcp://localhost:61616 以及用户名，密码 -->
	<amq:connectionFactory id="amqConnectionFactory"
		brokerURL="failover:(tcp://127.0.0.1:61616,tcp://127.0.0.1:61617,tcp://127.0.0.1:61618)?randomize=false" userName="admin" password="admin" exclusiveConsumer="false" />

	<!-- Spring Caching连接工厂 -->
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="mqconnectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="amqConnectionFactory"></property>
		<!-- 同上，同理 -->
		<!-- <constructor-arg ref="amqConnectionFactory" /> -->
		<!-- Session缓存数量 -->
		<property name="sessionCacheSize" value="100" />
	</bean>

	<!-- Spring JmsTemplate 的消息生产者 start -->

	<!-- 定义JmsTemplate的Queue类型 -->
	<bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<constructor-arg ref="mqconnectionFactory" />
		<!-- 非pub/sub模型（发布/订阅），即队列模式 -->
		<property name="pubSubDomain" value="false" />
	</bean>

	<!-- 定义JmsTemplate的Topic类型 -->
	<bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<constructor-arg ref="mqconnectionFactory" />
		<!-- pub/sub模型（发布/订阅） -->
		<property name="pubSubDomain" value="true" />
	</bean>

	<!--Spring JmsTemplate 的消息生产者 end -->

	<bean id="myMessageHandler" class="com.wemall.activemq.service.impl.MyMessageListener" />
	<bean id="myMessageHandler1" class="com.wemall.activemq.service.impl.MyMessageListener1" />

	<!-- 消息消费者 start -->

	<!-- 定义Queue监听器 -->
	<!-- transaction-manager="jmsTransactionManager" --> 
	<jms:listener-container destination-type="queue"  container-type="default" acknowledge="client" connection-factory="mqconnectionFactory">
		<jms:listener destination="test" ref="myMessageHandler" />
		<jms:listener destination="test" ref="myMessageHandler1" />
		<!-- <jms:listener destination="test.queue" ref="queueReceiver2"/> -->
	</jms:listener-container>
		<!-- 定义Queue监听器 -->
<!-- 	<jms:listener-container destination-type="queue"
		container-type="default" connection-factory="mqconnectionFactory"
		acknowledge="auto">
		<jms:listener destination="test" ref="myMessageHandler" />
		<jms:listener destination="test.queue" ref="queueReceiver2"/>
	</jms:listener-container> -->

	<!-- 定义Topic监听器 -->
	<!-- <jms:listener-container destination-type="topic" container-type="default" 
		connection-factory="connectionFactory" acknowledge="auto"> <jms:listener 
		destination="test.topic" ref="topicReceiver1"/> <jms:listener destination="test.topic" 
		ref="topicReceiver2"/> </jms:listener-container> -->
	<!-- 消息消费者 end -->
</beans>  